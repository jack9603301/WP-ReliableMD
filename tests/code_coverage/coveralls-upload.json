{"repo_token":"URuIeb1VklQC4lyITAg4ByKFYuDvFINOg","git":{"branch":"master","head":{"id":"0c4ed6dabcf6071c952af9e86f606c85eafcaac2","author_name":"jack9603301","author_email":"jack9603301@163.com","committer_name":"jack9603301","committer_email":"jack9603301@163.com","message":"\t\u4fee\u6539\uff1a     .coveralls.yml \t\u65b0\u6587\u4ef6\uff1a   test\/code_coverage\/clover.xml"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/jackworkshop\/WP-ReliableMD"}]},"run_at":"2020-03-16 16:52:55 +0000","source_files":[{"name":"src\/Admin\/Controller.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\Admin;\r\n\r\nclass Controller {\r\n\r\n\tprotected $config_filename;\r\n\r\n\tpublic function __construct() {\r\n\r\n\t\tadd_filter( 'replace_editor', array( $this, 'WPReliableMD_init' ), 10, 2 );\r\n\r\n\t\t\/\/Javascript \u6587\u4ef6\r\n\t\t\/\/add_filter( 'admin_head', array( $this, 'WPReliableMD_Enqueue_Scripts' ), 2 );\r\n\t\t\/\/CSS \u6587\u4ef6\r\n\t\t\/\/add_filter( 'admin_head', array( $this, 'WPReliableMD_Enqueue_Style' ), 2 );\r\n\r\n\t\tadd_filter( 'admin_body_class', array( $this, 'WPReliableMD_admin_body_class' ) );\r\n\t\t$this->config_filename = WPReliableMD_PATH.'\/config.json';\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Enqueue_Scripts() {\r\n\t\twp_enqueue_script( 'require' );\r\n\t\twp_enqueue_script( 'require-paths' );\r\n\t\twp_enqueue_script( 'ReliableMD' );\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Enqueue_Style() {\r\n\t\twp_enqueue_style( 'normalize' );\r\n\t\twp_enqueue_style( 'codemirror' );\r\n\t\twp_enqueue_style( 'github' );\r\n\t\twp_enqueue_style( 'tui-editor' );\r\n\t\twp_enqueue_style( 'tui-editor-contents' );\r\n\t\twp_enqueue_style( 'tui-color-picker' );\r\n\t\twp_enqueue_style( 'tui-chart' );\r\n\t\twp_enqueue_style( 'katex' );\r\n\t\twp_enqueue_style( 'ReliableMD' );\r\n\t}\r\n\r\n\tpublic function WPReliableMD_admin_body_class($classes) {\r\n\t\tif ( current_theme_supports( 'editor-styles' ) && current_theme_supports( 'dark-editor-style' ) ) {\r\n\t\t\t$classes .= \"reliablemd-editor-page is-fullscreen-mode is-dark-theme\";\r\n\t\t} else {\r\n\t\t\t\/\/ Default to is-fullscreen-mode to avoid jumps in the UI.\r\n\t\t\t$classes .= \"reliablemd-editor-page is-fullscreen-mode\";\r\n\t\t}\r\n\t\treturn $classes;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Page_Init() {\r\n\t\tglobal $post_type_object;\r\n\t\t$this->WPReliableMD_Enqueue_Scripts();\r\n\t\t$this->WPReliableMD_Enqueue_Style();\r\n\r\n\t\t?>\r\n\r\n        <div id=\"editor-title\" style=\"margin-top: 1em;\">\r\n            <h1>Input your text here<\/h1>\r\n        <\/div>\r\n\r\n        <div class=\"code-html\">\r\n            <div id=\"editSection\"><\/div>\r\n            <div style=\"text-align: right\">\r\n                <button id=\"submit\">Submit<\/button>\r\n            <\/div>\r\n        <\/div>\r\n\t\t<?php\r\n\t}\r\n\r\n\tpublic function WPReliableMD_init( $return, $post ) {\r\n\t\tglobal $title, $post_type;\r\n\r\n\t\tif ( true === $return && current_filter() === 'replace_editor' ) {\r\n\t\t\treturn $return;\r\n\t\t}\r\n\r\n\t\tadd_filter( 'screen_options_show_screen', '__return_false' );\r\n\r\n\t\t$post_type_object = get_post_type_object( $post_type );\r\n\t\tif ( ! empty( $post_type_object ) ) {\r\n\t\t\t$title = $post_type_object->labels->edit_item;\r\n\t\t}\r\n\r\n\t\trequire_once ABSPATH . 'wp-admin\/includes\/meta-boxes.php';\r\n\r\n\t\trequire_once ABSPATH . 'wp-admin\/includes\/revision.php';\r\n\r\n\t\trequire_once ABSPATH . 'wp-admin\/admin-header.php';\r\n\r\n\t\t$this->WPReliableMD_Page_Init();   \/\/\u521d\u59cb\u5316\u9875\u9762\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Config_Api() {\r\n\t\tif ( file_exists( $this->config_filename ) ) {\r\n\t\t\t$f = fopen($this->config_filename, \"r\");\r\n\t\t\t$config = fread($f, filesize($this->config_filename));\r\n\t\t\treturn json_decode($config,TRUE);\r\n\t\t} else {\r\n\t\t\treturn [\r\n\t\t\t\t'enable' => true,\r\n\t\t\t\t'latex' => \"MathJax\",\r\n\t\t\t\t'info' => 'default config'\r\n\t\t\t];\r\n\t\t}\r\n\t}\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,0,0,0,null,null,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,null,0,0,0,0,null,null,0,0,0,null,null,null,0,0,0,null,0,0,0,0,0,0,null,0,null,null,0,null,0,0,0,null,0,null,0,0,0,0,null,0,null,0,null,0,null,0,null,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,null,null,null]},{"name":"src\/Environment\/Controller.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\Environment;\r\n\r\nclass Controller {\r\n\r\n\tpublic function __construct() {\r\n\t\tadd_action( 'init', array( $this, 'WPReliableMD_Register_Script' ) );\r\n\t\tadd_action( 'init', array( $this, 'WPReliableMD_Register_Style' ) );\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Register_Script() {\r\n\r\n\t\tglobal $ReliableMDAdminController;\r\n\t\t\/\/\u5b9a\u4e49\u811a\u672c\u672c\u5730\u5316\u6570\u636e\r\n\t\t$ReliableMDSetting = array(\r\n\t\t\t'api_root'        => esc_url_raw( rest_url() ),\r\n\t\t\t'nonce'           => wp_create_nonce( 'wp_rest' ),\r\n\t\t\t'js_root'         => WPReliableMD_URL . '\/js\/',\r\n\t\t\t'js_dep_lib_root' => 'https:\/\/cdn.jsdelivr.net\/npm\/',\r\n\t\t\t'config' => $ReliableMDAdminController->WPReliableMD_Config_Api()\r\n\t\t);\r\n\r\n\/\/\t\twp_deregister_script( 'jquery' );\r\n\r\n\t\twp_register_script( 'require', WPReliableMD_URL . '\/js\/require.js', array(), WPReliableMD_VER, false );\r\n\t\twp_register_script( 'require-paths', WPReliableMD_URL . '\/js\/require_paths.js', array( 'require' ), WPReliableMD_VER, false );\r\n\t\twp_register_script( 'ReliableMD', WPReliableMD_URL . '\/js\/WPReliableMD_Admin.js', array( 'require-paths' ), WPReliableMD_VER, false );\r\n\t\twp_register_script( 'WPReliableMDFrontend', WPReliableMD_URL . '\/js\/WPReliableMDFrontend.js', array( 'require-paths' ), WPReliableMD_VER, false );\r\n\t\twp_localize_script( 'ReliableMD', 'ReliableMD', $ReliableMDSetting );\r\n\t\twp_localize_script( 'require-paths', 'ReliableMD', $ReliableMDSetting );\r\n\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Register_Style() {\r\n\r\n\t\t$js_dep_lib_root = 'https:\/\/cdn.jsdelivr.net\/npm\/';\r\n\t\twp_register_style( 'normalize', WPReliableMD_URL . '\/css\/normalize.css', array(), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'codemirror', $js_dep_lib_root.'\/codemirror\/lib\/codemirror.css', array( 'normalize' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'github', $js_dep_lib_root.'\/highlightjs\/styles\/github.css', array( 'codemirror' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'tui-editor', WPReliableMD_URL . '\/css\/tui-editor\/tui-editor.css', array( 'github' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'tui-editor-contents', WPReliableMD_URL . '\/css\/tui-editor\/tui-editor-contents.css', array( 'tui-editor' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'tui-color-picker', WPReliableMD_URL . '\/css\/tui-color-picker\/tui-color-picker.css', array( 'tui-editor-contents' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'tui-chart', WPReliableMD_URL . '\/css\/tui-chart\/tui-chart.css', array( 'tui-color-picker' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'katex', $js_dep_lib_root.'\/katex\/dist\/katex.css', array( 'tui-editor' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'ReliableMD', WPReliableMD_URL . '\/css\/WPReliableMD_Admin.css', array( 'katex' ), WPReliableMD_VER, false );\r\n\t\twp_register_style( 'WPReliableMDFrontend', WPReliableMD_URL . '\/css\/WPReliableMDFrontend.css', array( 'katex' ), WPReliableMD_VER, false );\r\n\t}\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,0,0,0,null,null,null,0,null,0,0,0,0,0,0,0,null,null,null,0,0,0,0,0,0,null,0,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,null,null,null]},{"name":"src\/Main.php","source":"<?php\r\n\r\nnamespace WPReliableMD;\r\n\r\nuse WPReliableMD\\Admin\\Controller as AdminController;\r\nuse WPReliableMD\\View\\Controller as ViewController;\r\nuse WPReliableMD\\REST\\Controller as RestController;\r\nuse WPReliableMD\\Environment\\Controller as EnvironmentController;\r\nuse WPReliableMD\\Meta\\Controller as MetaController;\r\n\r\nclass Main {\r\n\r\n\tpublic function __construct() {\r\n\r\n\t\tglobal $ReliableMDAdminController;\r\n\r\n\t\tadd_action('plugins_loaded', array($this,'EnableLanguages'));\r\n\r\n\t\tnew EnvironmentController(); \/\/\u521d\u59cb\u5316\u63d2\u4ef6\u73af\u5883\u63a7\u5236\u5668\r\n\r\n\t\tnew RestController();  \/\/\u521d\u59cb\u5316REST\u63a7\u5236\u5668\r\n\r\n\t\tnew ViewController(); \/\/\u521d\u59cb\u5316\u524d\u7aef\u6e32\u67d3\u63a7\u5236\u5668\r\n\r\n\t\t$ReliableMDAdminController = new AdminController(); \/\/\u521d\u59cb\u5316\u540e\u53f0\u63a7\u5236\u5668\r\n\r\n\t\tnew MetaController(); \/\/\u521d\u59cb\u5316\u63d2\u4ef6\u5143\u4fe1\u606f\u63a7\u5236\u5668\r\n\r\n\t}\r\n\r\n\tpublic function EnableLanguages() {\r\n\t\tload_plugin_textdomain(WPReliableMD_FILE,false,WPReliableMD_PATH.'\/languages\/'); \/\/ \u542f\u7528\u672c\u5730\u5316\r\n\t}\r\n\r\n\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,0,null,null,0,0,null,null,null,null,null]},{"name":"src\/Meta\/Controller.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\Meta;\r\n\r\nclass Controller {\r\n\r\n\tpublic function __construct() {\r\n\t\tadd_filter( 'plugin_action_links_' . WPReliableMD_NAME, array( $this, 'MetaActionLinks' ), 10, 5 );\r\n\t\tadd_filter( 'plugin_row_meta', array( $this, 'MetaRowMetaLinks' ), 10, 2 );\r\n\t}\r\n\r\n\tpublic function MetaActionLinks($actions) {\r\n\t\treturn array_merge(\r\n\t\t\tarray(\r\n\t\t\t\t'<a href=\"' . admin_url( \"plugins.php?page=WP-ReliableMD-Settings\" ) . '\" rel=\"nofollow\">' . __( 'Settings', WPReliableMD_NAME ) . '<\/a>',\r\n\t\t\t\t'<a href=\"https:\/\/github.com\/jackworkshop\/WP-ReliableMD.git\" target=\"_blank\" rel=\"nofollow\">' . __( 'Github', WPReliableMD_NAME ) . '<\/a>'\r\n\t\t\t),\r\n\t\t\t$actions\r\n\t\t);\r\n\t}\r\n\r\n\tpublic function MetaRowMetaLinks($links, $file) {\r\n\t\tif ( strpos( $file, WPReliableMD_FILE ) !== false ) {\r\n\t\t\t$new_links = array(\r\n\t\t\t\t\"Issues\" => '<a href=\"https:\/\/github.com\/jackworkshop\/WP-ReliableMD\/issues\" target=\"_blank\" rel=\"nofollow\">' . __( 'Issues', WPReliableMD_NAME ) . '<\/a>',\r\n\t\t\t\t'Github' => '<a href=\"https:\/\/github.com\/jackworkshop\/WP-ReliableMD.git\" target=\"_blank\" rel=\"nofollow\">' . __( 'Github', WPReliableMD_NAME ) . '<\/a>',\r\n\t\t\t\t'Gitlab' => '<a href=\"https:\/\/gitlab.com\/jackworkshop\/WP-ReliableMD.git\" target=\"_blank\" rel=\"nofollow\">' . __( 'Gitlab', WPReliableMD_NAME ) . '<\/a>',\r\n\t\t\t\t'Gitee' => '<a href=\"https:\/\/gitee.com\/jackworkshop\/WP-ReliableMD.git\" target=\"_blank\" rel=\"nofollow\">' . __( 'Gitee', WPReliableMD_NAME ) . '<\/a>',\r\n\t\t\t);\r\n\t\t\t$links = array_merge( $links, $new_links );\r\n\t\t}\r\n\t\treturn $links;\r\n\t}\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,0,0,0,null,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,null,null,null]},{"name":"src\/REST\/Controller.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\REST;\r\n\r\nuse WPReliableMD\\View\\Controller as ViewController;\r\n\r\nclass Controller {\r\n\r\n\tprotected $config_filename;\r\n\r\n\tpublic function __construct() {\r\n\r\n\t\t$this->config_filename = WPReliableMD_PATH.'\/config.json';\r\n\t\tadd_action( 'rest_api_init', array($this,'WPReliableMD_Api_Init'));\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Api_Init() {\r\n\t\tglobal $ReliableMDAdminController;\r\n\t\tregister_rest_route(WPReliableMD_NAME, 'config', [\r\n\t\t\t'methods'   => 'GET',\r\n\t\t\t'callback'  => array($ReliableMDAdminController,'WPReliableMD_Config_Api')\r\n\t\t]);\r\n\t\tregister_rest_route(WPReliableMD_NAME, 'config', [\r\n\t\t\t'methods'   => 'POST',\r\n\t\t\t'callback'  => array($this,'WPReliableMD_Config_Api_Set')\r\n\t\t]);\r\n\t\tregister_rest_route(WPReliableMD_NAME, 'markdown\/render\/(?P<id>[\\d]+)', [\r\n\t\t\t'methods'   => 'PUT',\r\n\t\t\t'callback'  => array($this,'WPReliableMD_Cache_markdown_render')\r\n\t\t]);\r\n\t\tregister_rest_route(WPReliableMD_NAME, 'markdown\/render\/shortcode', [\r\n\t\t\t'methods'   => 'PUT',\r\n\t\t\t'callback'  => array($this,'WPReliableMD_ShortCode_Cache_markdown_render')\r\n\t\t]);\r\n\t\tadd_filter( 'rest_prepare_post', array($this,'WPReliableMD_REST_Posts'), 10, 3 );\r\n\r\n\t\tregister_rest_field('post','markdown',array(\r\n\t\t\t'get_callback' => array($this,'WPReliableMD_REST_Post_markdown_Get'),\r\n\t\t\t'update_callback' => array($this,'WPReliableMD_REST_Post_markdown_Update')\r\n\t\t));\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Config_Api_Set($request) {\r\n\t\tif ( file_exists( $this->config_filename ) ) {\r\n\t\t\t$f = fopen($this->config_filename, \"w\");\r\n\t\t\tfwrite($f, json_encode($request->get_json_params()));\r\n\t\t\treturn $request->get_json_params();\r\n\t\t} else {\r\n\t\t\treturn $request->get_json_params();\r\n\t\t}\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Cache_markdown_render($request) {\r\n\t\t$content_type = $request->get_content_type();\r\n\t\tif ( empty( $content_type ) || 'application\/x-www-form-urlencoded' !== $content_type['value'] ) {\r\n\t\t\treturn new \\WP_Error( 'rest_invalid_content_type', __( 'Invalid Content-type.' ));\r\n\t\t}\r\n\t\t$id = $request['id'];\r\n\t\tif(wp_cache_set($id,$request->get_body(),'markdown_backend_rendered')) {\r\n\t\t\treturn [\r\n\t\t\t\t'id' => $id,\r\n\t\t\t\t'result' => 'Success'\r\n\t\t\t];\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn new \\WP_Error( 'rest_put_cache_failure', __( 'Failure to update object cache.' ));\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tpublic function WPReliableMD_ShortCode_Cache_markdown_render($request) {\r\n\t\t$content_type = $request->get_content_type();\r\n\t\tif ( empty( $content_type ) || 'application\/json' !== $content_type['value'] ) {\r\n\t\t\treturn new \\WP_Error( 'rest_invalid_content_type', __( 'Invalid Content-type.' ));\r\n\t\t}\r\n\t\t$json = $request->get_json_params();\r\n\t\t$hash = $json['hash'];\r\n\t\tif(wp_cache_set($hash,$json['cached'],'markdown_backend_rendered:shortcode')) {\r\n\t\t\treturn [\r\n\t\t\t\t'hash' => $hash,\r\n\t\t\t\t'result' => 'Success'\r\n\t\t\t];\r\n\t\t} else {\r\n\t\t\treturn new \\WP_Error( 'rest_put_cache_failure', __( 'Failure to update object cache.' ));\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic function WPReliableMD_REST_Posts($response, $post, $request  ) {\r\n\t\t$data = $response->data;\r\n\t\t$postid = $post->ID;\r\n\r\n\t\tif(get_post_meta($post->ID,'markdown',true) === 'true') {\r\n\t\t\t\/\/\u5982\u679c\u662fmarkdown\u6587\u7ae0\uff0c\u5219\u8f93\u51fa\r\n\t\t\t$markdown = $post->post_content;\r\n\t\t\t$data['content']['markdown'] = $markdown;\r\n\t\t\t\/\/\u5904\u7406markdown\u7684REST\u8f93\u51fa\u5904\u7406\r\n\t\t\t$content = $markdown;\r\n\t\t\t$content = ViewController::WPReliableMD_Content($content);\r\n\t\t\t$data['content']['rendered'] = $content;\r\n\r\n\t\t\t\/*\r\n\t\t \t * filter  : markdown_rest_post_override($data)\r\n\t\t \t * comment : The REST API interface implements the post type article to retrieve the JSON field when it is fetch.\r\n\t\t \t * params  :\r\n\t\t \t *   - $data : JSON before processing.\r\n\t\t \t *\/\r\n\t\t\t$data = apply_filters('markdown_rest_post_override',$data);\r\n\t\t}\r\n\r\n\t\t$response->data = $data; \/\/\u6839\u636ewordpress\u63d2\u4ef6\u7ea6\u5b9a\uff0c\u5e94\u8be5\u4fee\u6539\u7b2c\u4e00\u53c2\u6570\u7136\u540e\u8fd4\u56de\r\n\t\treturn $data;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_REST_Post_markdown_Get($post) {\r\n\t\t$markdown_tag = get_post_meta( $post['id'], 'markdown',true);\r\n\t\tif($markdown_tag === 'true') {\r\n\t\t\treturn true;\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tpublic function WPReliableMD_REST_Post_markdown_Update($data, $post) {\r\n\t\t$postid = $post->ID;\r\n\t\tif($data) {\r\n\t\t\tupdate_post_meta($postid, 'markdown', 'true');\r\n\t\t} else {\r\n\t\t\tupdate_post_meta($postid, 'markdown', 'false');\r\n\t\t}\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,null,null,0,0,null,0,null,0,0,null,0,0,0,null,null,null,null,null,null,null,0,0,null,0,0,0,null,null,0,0,0,0,0,0,null,0,null,null,0,0,0,0,0,0,null,0,0,null,null,null]},{"name":"src\/View\/Controller.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\View;\r\n\r\nuse WPReliableMD\\View\\Parser as Parser;\r\n\t\r\nclass Controller {\r\n\r\n\tpublic function __construct() {\r\n\r\n\t\t\/\/Javascript \u6587\u4ef6\r\n\t\tadd_filter( 'wp_head', array( $this, 'WPReliableMD_Enqueue_Scripts' ), 2 );\r\n\t\t\/\/CSS\r\n\t\tadd_filter( 'wp_head', array( $this, 'WPReliableMD_Enqueue_Style' ), 2 );\r\n\t\t\/\/markdown\u89e3\u6790\r\n\t\tadd_filter( 'the_content', array( $this, 'WPReliableMD_the_Content' ) );\r\n\t\tadd_filter( 'the_excerpt', array( $this, 'WPReliableMD_the_excerpt' ) );\r\n\t\tadd_filter('markdown_backend_rendered',array($this,'WPReliableMD_BackendRendered'),1,4);\r\n\t\tadd_filter('markdown_text',array($this,'WPReliableMD_MarkdownText_Transference'),1,3);\r\n\t\tadd_filter('markdown_shortcode_text',array($this,'WPReliableMD_MarkdownShortcodeText_AntiTransfer'),1);\r\n\t\tadd_filter('widget_text', 'do_shortcode');\r\n\t\tadd_filter('markdown_the_excerpt',array($this,'WPReliableMD_Encode_Process'),1,2);\r\n\t\tadd_filter('auto_markdown_excerpt_process',array($this,'WPReliableMD_Encode_Process_Utf8'),1,3);\r\n\t\tadd_filter('auto_markdown_excerpt_process',array($this,'WPReliableMD_Encode_Process_Gb2312'),1,3);\r\n\r\n\t\tadd_shortcode('markdown',array($this,'WPReliableMD_Shortcode_Markdown'));\r\n\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Encode_Process($string,$is_auto_get_excerpt)\r\n\t{\r\n\t\t$code = get_bloginfo('charset');\r\n\t\t$sublen = apply_filters('excerpt_length',50);\r\n\t\tif($is_auto_get_excerpt) {\r\n\t\t\t\/*\r\n\t\t\t * filter  : auto_markdown_excerpt_process($string,$sublen,$code)\r\n\t\t\t * comment : Extended coding support function covering markdown automatic interception summary mechanism.\r\n\t\t\t * params  :\r\n\t\t\t *   - $string : Pre processing string.\r\n\t\t\t *   - $sublen : Processing string length.\r\n\t\t\t *   - $code : Encoding of processing data.\r\n\t\t\t *\/\r\n\t\t\t$string = apply_filters('auto_markdown_excerpt_process',$string,$sublen,$code);\r\n\t\t} else {\r\n\t\t\t\/*\r\n\t\t\t * filter  : markdown_excerpt_process($string,$sublen,$code)\r\n\t\t\t * comment : Extended coding support function covering markdown automatic interception summary mechanism.\r\n\t\t\t * params  :\r\n\t\t\t *   - $string : Pre processing string.\r\n\t\t\t *   - $code : Encoding of processing data.\r\n\t\t\t *\/\r\n\t\t\t$string = apply_filters('markdown_excerpt_process',$string,$code);\r\n\t\t}\r\n\t\treturn $string;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Encode_Process_Utf8($string,$sublen,$code) {\r\n\t\t$start = 0;\r\n\t\tif($code == \"UTF-8\") {\r\n\t\t\t\/\/UTF-8\u5904\u7406\r\n\t\t\t$pa = \"\/[\\x01-\\x7f]|[\\xc2-\\xdf][\\x80-\\xbf]|\\xe0[\\xa0-\\xbf][\\x80-\\xbf]|[\\xe1-\\xef][\\x80-\\xbf][\\x80-\\xbf]|\\xf0[\\x90-\\xbf][\\x80-\\xbf][\\x80-\\xbf]|[\\xf1-\\xf7][\\x80-\\xbf][\\x80-\\xbf][\\x80-\\xbf]\/\";\r\n\t\t\tpreg_match_all($pa, $string, $t_string);\r\n\r\n\t\t\t$string = join('', array_slice($t_string[0], $start, $sublen));\r\n\t\t}\r\n\t\t\r\n\t\treturn $string;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Encode_Process_Gb2312($string,$sublen,$code) {\r\n\t\t$start = 0;\r\n\t\tif($code == \"GB2312\") {\r\n\t\t\t\/\/GB2312\r\n\t\t\t$start = $start*2;\r\n\t\t\t$sublen = $sublen*2;\r\n\t\t\t$strlen = strlen($string);\r\n\t\t\t$tmpstr = '';\r\n\r\n\t\t\tfor($i=0; $i< $strlen; $i++)\r\n\t\t\t{\r\n\t\t\t\tif($i>=$start && $i< ($start+$sublen))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(ord(substr($string, $i, 1))>129)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$tmpstr.= substr($string, $i, 2);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$tmpstr.= substr($string, $i, 1);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(ord(substr($string, $i, 1))>129) {\r\n\t\t\t\t\t$i++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t$string = $tmpstr;\r\n\t\t}\r\n\t\treturn $string;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_the_excerpt( $post_excerpt ) {\r\n\t\t$post_id = get_the_ID();\r\n\t\t$post = get_post( $post_id );\r\n\t\tif ( ! has_excerpt() ) {\r\n\t\t\t$post_excerpt = $post->post_content;\r\n\t\t}\r\n\r\n\t\tif ( get_post_meta( $post_id, 'markdown', true ) === 'true' ) {\r\n\t\t\t\/*\r\n\t\t\t * filter  : markdown_backend_rendered($backend_rendered,$content,$excerpt_bool)\r\n\t\t\t * comment : The original markdown data is preprocessed by the back end, and the rendering result is returned.\r\n\t\t\t * params  :\r\n\t\t\t *   - $backend_rendered : The output of a summary or the back end of an article.\r\n\t\t\t *   - $content : Subject before treatment\r\n\t\t\t *   - $excerpt_bool : If it is an article, it is false, if it is a summary, then it is true.\r\n\t\t\t *   - $is_shortcode_tag : If the short tag parser is parsed, it is true, otherwise it is false.\r\n\t\t\t *\/\r\n\t\t\t$post_excerpt = apply_filters('markdown_backend_rendered',$post_excerpt,$post->post_content,true,false);\r\n\t\t\tif ( preg_match( '#<p>((\\w|\\d|[^x00-xff]).+?)<\/p>#', $post_excerpt, $mc ) ) {\r\n\t\t\t\t$post_excerpt = $mc[1];\r\n\t\t\t\t\/*\r\n\t\t\t \t * filter  : markdown_the_excerpt($post_excerpt)\r\n\t\t\t \t * comment : This filter Hook process extracts the summary processing when extracting the abstract.\r\n\t\t\t \t * params  :\r\n\t\t\t \t *   - $post_excerpt : Subject before treatment\r\n\t\t\t \t *   - $is_auto_get_excerpt : Do you extract abstract text?\r\n\t\t\t \t *\/\r\n\t\t\t\t$post_excerpt = apply_filters('markdown_the_excerpt',$post_excerpt,true);\r\n\t\t\t} else {\r\n\t\t\t\t$post_excerpt = __('This post has no common text');\r\n\t\t\t\t\/*\r\n\t\t\t \t * filter  : markdown_the_excerpt_no_text_extract($post_excerpt)\r\n\t\t\t \t * comment : This filter Hook processing does not extract the summary processing when extracting the abstract.\r\n\t\t\t \t * params  :\r\n\t\t\t \t *   - $post_excerpt : Subject before treatment\r\n\t\t\t \t *   - $is_auto_get_excerpt : Do you extract abstract text?\r\n\t\t\t \t *\/\r\n\t\t\t\t$post_excerpt = apply_filters('markdown_the_excerpt',$post_excerpt,false);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn do_shortcode($post_excerpt);\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Enqueue_Scripts() {\r\n\t\tglobal $ReliableMDAdminController;\r\n\t\twp_enqueue_script( 'require' );\r\n\t\twp_enqueue_script( 'require-paths' );\r\n\t\twp_enqueue_script( 'WPReliableMDFrontend' );\r\n\t\tif(is_null($ReliableMDAdminController)) {\r\n\t\t\t$ReliableMDSetting = array(\r\n\t\t\t\t'api_root'        => esc_url_raw( rest_url() ),\r\n\t\t\t\t'nonce'           => wp_create_nonce( 'wp_rest' ),\r\n\t\t\t\t'js_root'         => WPReliableMD_URL . '\/js\/',\r\n\t\t\t\t'js_dep_lib_root' => 'https:\/\/cdn.jsdelivr.net\/npm\/',\r\n\t\t\t\t'id'              => get_the_ID(),\r\n\t\t\t\t'config'          => false\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\t$ReliableMDSetting = array(\r\n\t\t\t\t'api_root'        => esc_url_raw( rest_url() ),\r\n\t\t\t\t'nonce'           => wp_create_nonce( 'wp_rest' ),\r\n\t\t\t\t'js_root'         => WPReliableMD_URL . '\/js\/',\r\n\t\t\t\t'js_dep_lib_root' => 'https:\/\/cdn.jsdelivr.net\/npm\/',\r\n\t\t\t\t'id'              => get_the_ID(),\r\n\t\t\t\t'config'          => $ReliableMDAdminController->WPReliableMD_Config_Api()\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\twp_localize_script( 'WPReliableMDFrontend', 'ReliableMD', $ReliableMDSetting );\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Enqueue_Style() {\r\n\t\twp_enqueue_style( 'normalize' );\r\n\t\twp_enqueue_style( 'codemirror' );\r\n\t\twp_enqueue_style( 'github' );\r\n\t\twp_enqueue_style( 'tui-editor' );\r\n\t\twp_enqueue_style( 'tui-editor-contents' );\r\n\t\twp_enqueue_style( 'tui-color-picker' );\r\n\t\twp_enqueue_style( 'tui-chart' );\r\n\t\twp_enqueue_style( 'katex' );\r\n\t\twp_enqueue_style( 'WPReliableMDFrontend' );\r\n\t}\r\n\r\n\tpublic function WPReliableMD_the_Content( $content ) {\r\n\t\tif ( get_post_meta( get_the_ID(), 'markdown', true ) === 'true' ) {\r\n\t\t\t\/\/\u5982\u679c\u662fmarkdown\u6587\u7ae0\uff0c\u5219\u8f93\u51fa\uff0c\u4e0d\u4f7f\u7528\u524d\u9762\u5904\u7406\u7684\u7ed3\u679c\uff0c\u76f4\u63a5\u53d6\u6587\u7ae0\u6570\u636e\r\n\t\t\t$post    = get_post( get_the_ID() );\r\n\t\t\t$content = $post->post_content;\r\n\t\t\t$content = $this->WPReliableMD_Content( $content );\r\n\t\t}\r\n\r\n\t\treturn do_shortcode($content);\r\n\t}\r\n\r\n\tpublic function WPReliableMD_Shortcode_Markdown( $attr, $content ) {\r\n\t\t\/*\r\n\t\t * filter  : markdown_shortcode_text($markdown)\r\n\t\t * comment : Markdown text for short code parser.\r\n\t\t * params  :\r\n\t\t *   - $markdown : Markdown text before input processing.\r\n\t\t *\/\r\n\t\t$content = apply_filters('markdown_shortcode_text',$content);\r\n\t\treturn do_shortcode($this->WPReliableMD_Content($content,true));  \/\/\u89e3\u6790\uff0c\u6267\u884c\r\n\t}\r\n\r\n\tpublic function WPReliableMD_MarkdownShortcodeText_AntiTransfer($markdown)  {\r\n\t\t$AntiTransfer = array(\r\n\t\t\t'&gt;' => '>',\r\n\t\t\t'&lt;' => '<',\r\n\t\t);\r\n\r\n\t\t\/*\r\n\t\t * filter  : markdown_antiTransfer($AntiTransfer)\r\n\t\t * comment : Filter Hook for handling inverted tables.\r\n\t\t * params  :\r\n\t\t *   - $AntiTransfer : Input inverted meaning table and output inversion table.\r\n\t\t *\/\r\n\t\t$AntiTransfer = apply_filters('markdown_antiTransfer',$AntiTransfer);\r\n\r\n\r\n\t\tforeach ($AntiTransfer as $key => $value) {\r\n\t\t\t$markdown = str_replace($key,$value,$markdown);\r\n\t\t}\r\n\t\treturn $markdown;\r\n\t}\r\n\r\n\tpublic static function WPReliableMD_Content( $content,$is_shortcode_tag = false ) {\r\n\r\n\t\t$backend_rendered = null;\r\n\r\n\t\t$backend_rendered_text = $content;\r\n\r\n\t\t\/*\r\n\t\t* filter  : markdown_text($markdown)\r\n\t\t* comment : The original content of markdown is processed and then processed.\r\n\t\t* params  :\r\n\t\t*   - $markdown : Subject before treatment\r\n\t\t*   - $is_backend_rendered : If the result is input to the pre renderer, it is true, otherwise it is false.\r\n\t\t*   - $is_shortcode_tag : If the short tag parser is parsed, it is true, otherwise it is false.\r\n\t\t*\/\r\n\r\n\t\t$backend_rendered_text = apply_filters('markdown_text',$backend_rendered_text,true,$is_shortcode_tag);  \/\/\u6267\u884cHOOK\uff0c\u8fdb\u884c\u5904\u7406\r\n\r\n\t\t\/*\r\n\t\t* filter  : markdown_backend_rendered($backend_rendered,$content,$excerpt_bool)\r\n\t\t* comment : The original markdown data is preprocessed by the back end, and the rendering result is returned.\r\n\t\t* params  :\r\n\t\t*   - $backend_rendered : The output of a summary or the back end of an article.\r\n\t\t*   - $content : Subject before treatment\r\n\t\t*   - $excerpt_bool : If it is an article, it is false, if it is a summary, then it is true.\r\n\t\t*   - $is_shortcode_tag : If the short tag parser is parsed, it is true, otherwise it is false.\r\n\t\t*\/\r\n\t\t$backend_rendered = apply_filters('markdown_backend_rendered',$backend_rendered,$backend_rendered_text,false,$is_shortcode_tag);  \/\/\u53ef\u7531\u7528\u6237\u8986\u76d6\u89e3\u6790\u6548\u679c\r\n\r\n\t\t\/*\r\n\t\t* filter  : markdown_text($markdown)\r\n\t\t* comment : The original content of markdown is processed and then processed.\r\n\t\t* params  :\r\n\t\t*   - $markdown : Subject before treatment\r\n\t\t*   - $is_backend_rendered : If the result is input to the pre renderer, it is true, otherwise it is false.\r\n\t\t*   - $is_shortcode_tag : If the short tag parser is parsed, it is true, otherwise it is false.\r\n\t\t*\/\r\n\r\n\t\t$content = apply_filters('markdown_text',$content,false,$is_shortcode_tag);  \/\/\u6267\u884cHOOK\uff0c\u8fdb\u884c\u5904\u7406\r\n\r\n\t\t$new_content      = \"<div class='markdown-block'>\";\r\n\t\t$new_content      .= \"<pre class='markdown' style='display:none;'>{$content}<\/pre>\";\r\n\t\t$new_content      .= \"<div class='markdown-backend-rendered'>{$backend_rendered}<\/div>\";\r\n\t\t$new_content      .= \"<\/div>\";\r\n\r\n\t\tif(!$is_shortcode_tag) {\r\n\t\t\t$content = \"<div class='posts'>{$new_content}<\/div>\";\r\n\t\t} else {\r\n\t\t\t$md_hash = hash('md5',$backend_rendered_text);\r\n\t\t\t$content = \"<div class='shortcode' hash='{$md_hash}'>{$new_content}<\/div>\";\r\n\t\t}\r\n\r\n\t\t\/*\r\n\t\t* filter  : markdown_content($content)\r\n\t\t* comment : The results returned by the markdown server are processed, and then returned to the browser.\r\n\t\t* params  :\r\n\t\t*   - $content : Subject before treatment\r\n\t\t*   - $is_backend_rendered : If the result is input to the pre renderer, it is true, otherwise it is false.\r\n\t\t*   - $is_shortcode_tag : If the short tag parser is parsed, it is true, otherwise it is false.\r\n\t\t*\/\r\n\r\n\t\t$content = apply_filters('markdown_content',$content,false,$is_shortcode_tag);  \/\/\u6267\u884cHOOK\uff0c\u8fdb\u884c\u5904\u7406\r\n\r\n\t\treturn $content;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_MarkdownText_Transference($markdown,$is_backend_rendered,$is_shortcode_tag) {\r\n\t\t\/\/\u8f6c\u4e49\u5904\u7406\r\n\r\n\t\tif(!$is_backend_rendered) {\r\n\t\t\t$markdown = str_replace(array(\"\\r\\n\", \"\\r\", \"\\n\"),'&br;',$markdown);\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn $markdown;\r\n\t}\r\n\r\n\tpublic function WPReliableMD_BackendRendered($backend_rendered,$content,$excerpt_bool,$is_shortcode_tag) {\r\n\t\tif(!$is_shortcode_tag) {\r\n\t\t\t$post_id = get_the_ID();\r\n\t\t\tif($excerpt_bool) {\r\n\t\t\t\t\/\/\u5982\u679c\u662f\u6458\u8981\u7f13\u5b58\r\n\t\t\t\t$backend_rendered = wp_cache_get($post_id,'markdown_backend_rendered:excerpt');\r\n\t\t\t\tif($backend_rendered === false) {\r\n\t\t\t\t\t$parser = new Parser();\r\n\t\t\t\t\t$backend_rendered = $parser->makeHtml( $content );\r\n\t\t\t\t\twp_cache_set($post_id,$backend_rendered,'markdown_backend_rendered:excerpt');\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t\/\/\u5982\u679c\u662f\u6587\u7ae0\u7f13\u5b58\r\n\t\t\t\t$backend_rendered = wp_cache_get($post_id,'markdown_backend_rendered');\r\n\t\t\t\tif($backend_rendered === false) {\r\n\t\t\t\t\t$parser = new Parser();\r\n\t\t\t\t\t$backend_rendered = $parser->makeHtml( $content );\r\n\t\t\t\t\twp_cache_set($post_id,$backend_rendered,'markdown_backend_rendered');\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t\/\/\u77ed\u6807\u7b7e\u6e32\u67d3\u5668\r\n\t\t\t$md_hash = hash('md5',$content);\r\n\t\t\t$backend_rendered = wp_cache_get($md_hash,'markdown_backend_rendered:shortcode');\r\n\t\t\tif($backend_rendered === false) {\r\n\t\t\t\t$parser = new Parser();\r\n\t\t\t\t$backend_rendered = $parser->makeHtml( $content );\r\n\t\t\t\twp_cache_set($md_hash,$backend_rendered,'markdown_backend_rendered:shortcode');\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t\treturn $backend_rendered;\r\n\t}\r\n}\r\n\r\n?>","coverage":[null,null,null,null,null,null,null,null,null,null,null,0,null,0,null,0,0,0,0,0,0,0,0,0,null,0,null,0,null,null,0,0,0,0,null,null,null,null,null,null,null,null,0,0,null,null,null,null,null,null,null,0,0,0,0,null,null,0,0,null,0,0,null,0,0,null,0,0,null,null,0,0,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,null,0,0,0,0,0,null,0,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,0,0,0,null,0,0,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,0,0,0,0,0,0,0,0,0,0,null,null,0,null,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,null,0,null,null,0,0,0,0,0,null,null,null,0,null,0,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,0,0,null,0,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,null,0,0,null,null,null,null,0,0,0,null,null,0,0,null,null,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,null,0,null,null,0,0,null,null,null]},{"name":"src\/View\/Parser.php","source":"<?php\r\n\r\nnamespace WPReliableMD\\View;\r\n\/**\r\n * Parser\r\n *\r\n * @copyright Copyright (c) 2012 SegmentFault Team. (http:\/\/segmentfault.com)\r\n * @author Joyqi <joyqi@segmentfault.com>\r\n * @license BSD License\r\n *\/\r\nclass Parser\r\n{\r\n    \/**\r\n     * _whiteList\r\n     *\r\n     * @var string\r\n     *\/\r\n    public $_commonWhiteList = 'kbd|b|i|strong|em|sup|sub|br|code|del|a|hr|small';\r\n\r\n    \/**\r\n     * html tags\r\n     *\r\n     * @var string\r\n     *\/\r\n    public $_blockHtmlTags = 'p|div|h[1-6]|blockquote|pre|table|dl|ol|ul|address|form|fieldset|iframe|hr|legend|article|section|nav|aside|hgroup|header|footer|figcaption|svg|script|noscript';\r\n\r\n    \/**\r\n     * _specialWhiteList\r\n     *\r\n     * @var mixed\r\n     * @access private\r\n     *\/\r\n    public $_specialWhiteList = array(\r\n        'table' => 'table|tbody|thead|tfoot|tr|td|th'\r\n    );\r\n\r\n    \/**\r\n     * _footnotes\r\n     *\r\n     * @var array\r\n     *\/\r\n    public $_footnotes;\r\n\r\n    \/**\r\n     * @var bool\r\n     *\/\r\n    public $_html = false;\r\n\r\n    \/**\r\n     * @var bool\r\n     *\/\r\n    public $_line = false;\r\n\r\n    \/**\r\n     * @var array\r\n     *\/\r\n    public $blockParsers = array(\r\n        array('code', 10),\r\n        array('shtml', 20),\r\n        array('pre', 30),\r\n        array('ahtml', 40),\r\n        array('list', 50),\r\n        array('math', 60),\r\n        array('html', 70),\r\n        array('footnote', 80),\r\n        array('definition', 90),\r\n        array('quote', 100),\r\n        array('table', 110),\r\n        array('sh', 120),\r\n        array('mh', 130),\r\n        array('hr', 140),\r\n        array('default', 9999)\r\n    );\r\n\r\n    \/**\r\n     * _blocks\r\n     *\r\n     * @var array\r\n     *\/\r\n    private $_blocks;\r\n\r\n    \/**\r\n     * _current\r\n     *\r\n     * @var string\r\n     *\/\r\n    private $_current;\r\n\r\n    \/**\r\n     * _pos\r\n     *\r\n     * @var int\r\n     *\/\r\n    private $_pos;\r\n\r\n    \/**\r\n     * _definitions\r\n     *\r\n     * @var array\r\n     *\/\r\n    public $_definitions;\r\n\r\n    \/**\r\n     * @var array\r\n     *\/\r\n    private $_hooks = array();\r\n\r\n    \/**\r\n     * @var array\r\n     *\/\r\n    private $_holders;\r\n\r\n    \/**\r\n     * @var string\r\n     *\/\r\n    private $_uniqid;\r\n\r\n    \/**\r\n     * @var int\r\n     *\/\r\n    private $_id;\r\n\r\n    \/**\r\n     * @var array\r\n     *\/\r\n    private $_parsers = array();\r\n\r\n    \/**\r\n     * makeHtml\r\n     *\r\n     * @param mixed $text\r\n     * @return string\r\n     *\/\r\n    public function makeHtml($text)\r\n    {\r\n        $this->_footnotes = array();\r\n        $this->_definitions = array();\r\n        $this->_holders = array();\r\n        $this->_uniqid = md5(uniqid());\r\n        $this->_id = 0;\r\n\r\n        usort($this->blockParsers, function ($a, $b) {\r\n            return $a[1] < $b[1] ? -1 : 1;\r\n        });\r\n\r\n        foreach ($this->blockParsers as $parser) {\r\n            list ($name) = $parser;\r\n\r\n            if (isset($parser[2])) {\r\n                $this->_parsers[$name] = $parser[2];\r\n            } else {\r\n                $this->_parsers[$name] = array($this, 'parseBlock' . ucfirst($name));\r\n            }\r\n        }\r\n\r\n        $text = $this->initText($text);\r\n        $html = $this->parse($text);\r\n        $html = $this->makeFootnotes($html);\r\n        $html = $this->optimizeLines($html);\r\n\r\n        return $this->call('makeHtml', $html);\r\n    }\r\n\r\n    \/**\r\n     * @param $html\r\n     *\/\r\n    public function enableHtml($html = true)\r\n    {\r\n        $this->_html = $html;\r\n    }\r\n\r\n    \/**\r\n     * @param bool $line\r\n     *\/\r\n    public function enableLine($line = true)\r\n    {\r\n        $this->_line = $line;\r\n    }\r\n\r\n    \/**\r\n     * @param $type\r\n     * @param $callback\r\n     *\/\r\n    public function hook($type, $callback)\r\n    {\r\n        $this->_hooks[$type][] = $callback;\r\n    }\r\n\r\n    \/**\r\n     * @param $str\r\n     * @return string\r\n     *\/\r\n    public function makeHolder($str)\r\n    {\r\n        $key = \"\\r\" . $this->_uniqid . $this->_id . \"\\r\";\r\n        $this->_id++;\r\n        $this->_holders[$key] = $str;\r\n\r\n        return $key;\r\n    }\r\n\r\n    \/**\r\n     * @param $text\r\n     * @return mixed\r\n     *\/\r\n    private function initText($text)\r\n    {\r\n        $text = str_replace(array(\"\\t\", \"\\r\"), array('    ', ''), $text);\r\n        return $text;\r\n    }\r\n\r\n    \/**\r\n     * @param $html\r\n     * @return string\r\n     *\/\r\n    private function makeFootnotes($html)\r\n    {\r\n        if (count($this->_footnotes) > 0) {\r\n            $html .= '<div class=\"footnotes\"><hr><ol>';\r\n            $index = 1;\r\n\r\n            while ($val = array_shift($this->_footnotes)) {\r\n                if (is_string($val)) {\r\n                    $val .= \" <a href=\\\"#fnref-{$index}\\\" class=\\\"footnote-backref\\\">&#8617;<\/a>\";\r\n                } else {\r\n                    $val[count($val) - 1] .= \" <a href=\\\"#fnref-{$index}\\\" class=\\\"footnote-backref\\\">&#8617;<\/a>\";\r\n                    $val = count($val) > 1 ? $this->parse(implode(\"\\n\", $val)) : $this->parseInline($val[0]);\r\n                }\r\n\r\n                $html .= \"<li id=\\\"fn-{$index}\\\">{$val}<\/li>\";\r\n                $index++;\r\n            }\r\n\r\n            $html .= '<\/ol><\/div>';\r\n        }\r\n\r\n        return $html;\r\n    }\r\n\r\n    \/**\r\n     * parse\r\n     *\r\n     * @param string $text\r\n     * @param bool $inline\r\n     * @param int $offset\r\n     * @return string\r\n     *\/\r\n    private function parse($text, $inline = false, $offset = 0)\r\n    {\r\n        $blocks = $this->parseBlock($text, $lines);\r\n        $html = '';\r\n\r\n        \/\/ inline mode for single normal block\r\n        if ($inline && count($blocks) == 1 && $blocks[0][0] == 'normal') {\r\n            $blocks[0][3] = true;\r\n        }\r\n\r\n        foreach ($blocks as $block) {\r\n            list ($type, $start, $end, $value) = $block;\r\n            $extract = array_slice($lines, $start, $end - $start + 1);\r\n            $method = 'parse' . ucfirst($type);\r\n\r\n            $extract = $this->call('before' . ucfirst($method), $extract, $value);\r\n            $result = $this->{$method}($extract, $value, $start + $offset, $end + $offset);\r\n            $result = $this->call('after' . ucfirst($method), $result, $value);\r\n\r\n            $html .= $result;\r\n        }\r\n\r\n        return $html;\r\n    }\r\n\r\n    \/**\r\n     * @param $text\r\n     * @param $clearHolders\r\n     * @return string\r\n     *\/\r\n    private function releaseHolder($text, $clearHolders = true)\r\n    {\r\n        $deep = 0;\r\n        while (strpos($text, \"\\r\") !== false && $deep < 10) {\r\n            $text = str_replace(array_keys($this->_holders), array_values($this->_holders), $text);\r\n            $deep++;\r\n        }\r\n\r\n        if ($clearHolders) {\r\n            $this->_holders = array();\r\n        }\r\n\r\n        return $text;\r\n    }\r\n\r\n    \/**\r\n     * @param $start\r\n     * @param int $end\r\n     * @return string\r\n     *\/\r\n    public function markLine($start, $end = -1)\r\n    {\r\n        if ($this->_line) {\r\n            $end = $end < 0 ? $start : $end;\r\n            return '<span class=\"line\" data-start=\"' . $start\r\n                . '\" data-end=\"' . $end . '\" data-id=\"' . $this->_uniqid . '\"><\/span>';\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    \/**\r\n     * @param array $lines\r\n     * @param $start\r\n     * @return string\r\n     *\/\r\n    public function markLines(array $lines, $start)\r\n    {\r\n        $i = -1;\r\n        $self = $this;\r\n\r\n        return $this->_line ? array_map(function ($line) use ($self, $start, &$i) {\r\n            $i++;\r\n            return $self->markLine($start + $i) . $line;\r\n        }, $lines) : $lines;\r\n    }\r\n\r\n    \/**\r\n     * @param $html\r\n     * @return string\r\n     *\/\r\n    public function optimizeLines($html)\r\n    {\r\n        $last = 0;\r\n\r\n        return $this->_line ?\r\n            preg_replace_callback(\"\/class=\\\"line\\\" data\\-start=\\\"([0-9]+)\\\" data\\-end=\\\"([0-9]+)\\\" (data\\-id=\\\"{$this->_uniqid}\\\")\/\",\r\n                function ($matches) use (&$last) {\r\n                    if ($matches[1] != $last) {\r\n                        $replace = 'class=\"line\" data-start=\"' . $last . '\" data-start-original=\"' . $matches[1] . '\" data-end=\"' . $matches[2] . '\" ' . $matches[3];\r\n                    } else {\r\n                        $replace = $matches[0];\r\n                    }\r\n\r\n                    $last = $matches[2] + 1;\r\n                    return $replace;\r\n                }, $html) : $html;\r\n    }\r\n\r\n    \/**\r\n     * @param $type\r\n     * @param $value\r\n     * @return mixed\r\n     *\/\r\n    public function call($type, $value)\r\n    {\r\n        if (empty($this->_hooks[$type])) {\r\n            return $value;\r\n        }\r\n\r\n        $args = func_get_args();\r\n        $args = array_slice($args, 1);\r\n\r\n        foreach ($this->_hooks[$type] as $callback) {\r\n            $value = call_user_func_array($callback, $args);\r\n            $args[0] = $value;\r\n        }\r\n\r\n        return $value;\r\n    }\r\n\r\n    \/**\r\n     * parseInline\r\n     *\r\n     * @param string $text\r\n     * @param string $whiteList\r\n     * @param bool $clearHolders\r\n     * @param bool $enableAutoLink\r\n     * @return string\r\n     *\/\r\n\r\n    public function parseInline($text, $whiteList = '', $clearHolders = true, $enableAutoLink = true)\r\n    {\r\n        $self = $this;\r\n        $text = $this->call('beforeParseInline', $text);\r\n\r\n        \/\/ code\r\n        $text = preg_replace_callback(\r\n            \"\/(^|[^\\\\\\])(`+)(.+?)\\\\2\/\",\r\n            function ($matches) use ($self) {\r\n                return $matches[1] . $self->makeHolder(\r\n                        '<code>' . htmlspecialchars($matches[3]) . '<\/code>'\r\n                    );\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ mathjax\r\n        $text = preg_replace_callback(\r\n            \"\/(^|[^\\\\\\])(\\\\$+)(.+?)\\\\2\/\",\r\n            function ($matches) use ($self) {\r\n                return $matches[1] . $self->makeHolder(\r\n                        $matches[2] . htmlspecialchars($matches[3]) . $matches[2]\r\n                    );\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ escape\r\n        $text = preg_replace_callback(\r\n            \"\/\\\\\\(.)\/u\",\r\n            function ($matches) use ($self) {\r\n                $escaped = htmlspecialchars($matches[1]);\r\n                $escaped = str_replace('$', '&dollar;', $escaped);\r\n                return $self->makeHolder($escaped);\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ link\r\n        $text = preg_replace_callback(\r\n            \"\/<(https?:\\\/\\\/.+)>\/i\",\r\n            function ($matches) use ($self) {\r\n                $url = $self->cleanUrl($matches[1]);\r\n                $link = $self->call('parseLink', $matches[1]);\r\n\r\n                return $self->makeHolder(\r\n                    \"<a href=\\\"{$url}\\\">{$link}<\/a>\"\r\n                );\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ encode unsafe tags\r\n        $text = preg_replace_callback(\r\n            \"\/<(\\\/?)([a-z0-9-]+)(\\s+[^>]*)?>\/i\",\r\n            function ($matches) use ($self, $whiteList) {\r\n                if ($self->_html || false !== stripos(\r\n                        '|' . $self->_commonWhiteList . '|' . $whiteList . '|', '|' . $matches[2] . '|'\r\n                    )) {\r\n                    return $self->makeHolder($matches[0]);\r\n                } else {\r\n                    return htmlspecialchars($matches[0]);\r\n                }\r\n            },\r\n            $text\r\n        );\r\n\r\n        if ($this->_html) {\r\n            $text = preg_replace_callback(\"\/<!\\-\\-(.*?)\\-\\->\/\", function ($matches) use ($self) {\r\n                return $self->makeHolder($matches[0]);\r\n            }, $text);\r\n        }\r\n\r\n        $text = str_replace(array('<', '>'), array('&lt;', '&gt;'), $text);\r\n\r\n        \/\/ footnote\r\n        $text = preg_replace_callback(\r\n            \"\/\\[\\^((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)+?)\\]\/\",\r\n            function ($matches) use ($self) {\r\n                $id = array_search($matches[1], $self->_footnotes);\r\n\r\n                if (false === $id) {\r\n                    $id = count($self->_footnotes) + 1;\r\n                    $self->_footnotes[$id] = $self->parseInline($matches[1], '', false);\r\n                }\r\n\r\n                return $self->makeHolder(\r\n                    \"<sup id=\\\"fnref-{$id}\\\"><a href=\\\"#fn-{$id}\\\" class=\\\"footnote-ref\\\">{$id}<\/a><\/sup>\"\r\n                );\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ image\r\n        $text = preg_replace_callback(\r\n            \"\/!\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)*?)\\]\\(((?:[^\\)]|\\\\\\\\\\)|\\\\\\\\\\()+?)\\)\/\",\r\n            function ($matches) use ($self) {\r\n                $escaped = htmlspecialchars($self->escapeBracket($matches[1]));\r\n                $url = $self->escapeBracket($matches[2]);\r\n                $url = $self->cleanUrl($url);\r\n                return $self->makeHolder(\r\n                    \"<img src=\\\"{$url}\\\" alt=\\\"{$escaped}\\\" title=\\\"{$escaped}\\\">\"\r\n                );\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/!\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)*?)\\]\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)+?)\\]\/\",\r\n            function ($matches) use ($self) {\r\n                $escaped = htmlspecialchars($self->escapeBracket($matches[1]));\r\n\r\n                $result = isset($self->_definitions[$matches[2]]) ?\r\n                    \"<img src=\\\"{$self->_definitions[$matches[2]]}\\\" alt=\\\"{$escaped}\\\" title=\\\"{$escaped}\\\">\"\r\n                    : $escaped;\r\n\r\n                return $self->makeHolder($result);\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ link\r\n        $text = preg_replace_callback(\r\n            \"\/\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)+?)\\]\\(((?:[^\\)]|\\\\\\\\\\)|\\\\\\\\\\()+?)\\)\/\",\r\n            function ($matches) use ($self) {\r\n                $escaped = $self->parseInline(\r\n                    $self->escapeBracket($matches[1]), '', false, false\r\n                );\r\n                $url = $self->escapeBracket($matches[2]);\r\n                $url = $self->cleanUrl($url);\r\n                return $self->makeHolder(\"<a href=\\\"{$url}\\\">{$escaped}<\/a>\");\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)+?)\\]\\[((?:[^\\]]|\\\\\\\\\\]|\\\\\\\\\\[)+?)\\]\/\",\r\n            function ($matches) use ($self) {\r\n                $escaped = $self->parseInline(\r\n                    $self->escapeBracket($matches[1]), '', false\r\n                );\r\n                $result = isset($self->_definitions[$matches[2]]) ?\r\n                    \"<a href=\\\"{$self->_definitions[$matches[2]]}\\\">{$escaped}<\/a>\"\r\n                    : $escaped;\r\n\r\n                return $self->makeHolder($result);\r\n            },\r\n            $text\r\n        );\r\n\r\n        \/\/ strong and em and some fuck\r\n        $text = $this->parseInlineCallback($text);\r\n        $text = preg_replace(\r\n            \"\/<([_a-z0-9-\\.\\+]+@[^@]+\\.[a-z]{2,})>\/i\",\r\n            \"<a href=\\\"mailto:\\\\1\\\">\\\\1<\/a>\",\r\n            $text\r\n        );\r\n\r\n        \/\/ autolink url\r\n        if ($enableAutoLink) {\r\n            $text = preg_replace_callback(\r\n                \"\/(^|[^\\\"])((https?):[\\p{L}_0-9-\\.\\\/%#!@\\?\\+=~\\|\\,&\\(\\)]+)($|[^\\\"])\/iu\",\r\n                function ($matches) use ($self) {\r\n                    $link = $self->call('parseLink', $matches[2]);\r\n                    return \"{$matches[1]}<a href=\\\"{$matches[2]}\\\">{$link}<\/a>{$matches[4]}\";\r\n                },\r\n                $text\r\n            );\r\n        }\r\n\r\n        $text = $this->call('afterParseInlineBeforeRelease', $text);\r\n        $text = $this->releaseHolder($text, $clearHolders);\r\n\r\n        $text = $this->call('afterParseInline', $text);\r\n\r\n        return $text;\r\n    }\r\n\r\n    \/**\r\n     * @param $text\r\n     * @return mixed\r\n     *\/\r\n    public function parseInlineCallback($text)\r\n    {\r\n        $self = $this;\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\*{3})(.+?)\\\\1\/\",\r\n            function ($matches) use ($self) {\r\n                return '<strong><em>' .\r\n                    $self->parseInlineCallback($matches[2]) .\r\n                    '<\/em><\/strong>';\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\*{2})(.+?)\\\\1\/\",\r\n            function ($matches) use ($self) {\r\n                return '<strong>' .\r\n                    $self->parseInlineCallback($matches[2]) .\r\n                    '<\/strong>';\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\*)(.+?)\\\\1\/\",\r\n            function ($matches) use ($self) {\r\n                return '<em>' .\r\n                    $self->parseInlineCallback($matches[2]) .\r\n                    '<\/em>';\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\s+|^)(_{3})(.+?)\\\\2(\\s+|$)\/\",\r\n            function ($matches) use ($self) {\r\n                return $matches[1] . '<strong><em>' .\r\n                    $self->parseInlineCallback($matches[3]) .\r\n                    '<\/em><\/strong>' . $matches[4];\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\s+|^)(_{2})(.+?)\\\\2(\\s+|$)\/\",\r\n            function ($matches) use ($self) {\r\n                return $matches[1] . '<strong>' .\r\n                    $self->parseInlineCallback($matches[3]) .\r\n                    '<\/strong>' . $matches[4];\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(\\s+|^)(_)(.+?)\\\\2(\\s+|$)\/\",\r\n            function ($matches) use ($self) {\r\n                return $matches[1] . '<em>' .\r\n                    $self->parseInlineCallback($matches[3]) .\r\n                    '<\/em>' . $matches[4];\r\n            },\r\n            $text\r\n        );\r\n\r\n        $text = preg_replace_callback(\r\n            \"\/(~{2})(.+?)\\\\1\/\",\r\n            function ($matches) use ($self) {\r\n                return '<del>' .\r\n                    $self->parseInlineCallback($matches[2]) .\r\n                    '<\/del>';\r\n            },\r\n            $text\r\n        );\r\n\r\n        return $text;\r\n    }\r\n\r\n    \/**\r\n     * parseBlock\r\n     *\r\n     * @param string $text\r\n     * @param array $lines\r\n     * @return array\r\n     *\/\r\n    private function parseBlock($text, &$lines)\r\n    {\r\n        $lines = explode(\"\\n\", $text);\r\n        $this->_blocks = array();\r\n        $this->_current = 'normal';\r\n        $this->_pos = -1;\r\n\r\n        $state = array(\r\n            'special' => implode(\"|\", array_keys($this->_specialWhiteList)),\r\n            'empty' => 0,\r\n            'html' => false\r\n        );\r\n\r\n        \/\/ analyze by line\r\n        foreach ($lines as $key => $line) {\r\n            $block = $this->getBlock();\r\n            $args = array($block, $key, $line, &$state, $lines);\r\n\r\n            if ($this->_current != 'normal') {\r\n                $pass = call_user_func_array($this->_parsers[$this->_current], $args);\r\n\r\n                if (!$pass) {\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            foreach ($this->_parsers as $name => $parser) {\r\n                if ($name != $this->_current) {\r\n                    $pass = call_user_func_array($parser, $args);\r\n\r\n                    if (!$pass) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return $this->optimizeBlocks($this->_blocks, $lines);\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockList($block, $key, $line, &$state)\r\n    {\r\n        if (preg_match(\"\/^(\\s*)((?:[0-9]+\\.)|\\-|\\+|\\*)\\s+\/i\", $line, $matches)) {\r\n            $space = strlen($matches[1]);\r\n            $state['empty'] = 0;\r\n\r\n            \/\/ opened\r\n            if ($this->isBlock('list')) {\r\n                $this->setBlock($key, $space);\r\n            } else {\r\n                $this->startBlock('list', $key, $space);\r\n            }\r\n\r\n            return false;\r\n        } else if ($this->isBlock('list') && !preg_match(\"\/^\\s*\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]:\\s*(.+)$\/\", $line)) {\r\n            if ($state['empty'] <= 1\r\n                && preg_match(\"\/^(\\s+)\/\", $line, $matches)\r\n                && strlen($matches[1]) > $block[3]) {\r\n\r\n                $state['empty'] = 0;\r\n                $this->setBlock($key);\r\n                return false;\r\n            } else if (preg_match(\"\/^(\\s*)$\/\", $line) && $state['empty'] == 0) {\r\n                $state['empty']++;\r\n                $this->setBlock($key);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockCode($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^(\\s*)(~{3,}|`{3,})([^`~]*)$\/i\", $line, $matches)) {\r\n            if ($this->isBlock('code')) {\r\n                $isAfterList = $block[3][2];\r\n\r\n                if ($isAfterList) {\r\n                    $this->combineBlock()\r\n                        ->setBlock($key);\r\n                } else {\r\n                    $this->setBlock($key)\r\n                        ->endBlock();\r\n                }\r\n            } else {\r\n                $isAfterList = false;\r\n\r\n                if ($this->isBlock('list')) {\r\n                    $space = $block[3];\r\n\r\n                    $isAfterList = ($space > 0 && strlen($matches[1]) >= $space)\r\n                        || strlen($matches[1]) > $space;\r\n                }\r\n\r\n                $this->startBlock('code', $key, array(\r\n                    $matches[1], $matches[3], $isAfterList\r\n                ));\r\n            }\r\n\r\n            return false;\r\n        } else if ($this->isBlock('code')) {\r\n            $this->setBlock($key);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockShtml($block, $key, $line, &$state)\r\n    {\r\n        if ($this->_html) {\r\n            if (preg_match(\"\/^(\\s*)!!!(\\s*)$\/\", $line, $matches)) {\r\n                if ($this->isBlock('shtml')) {\r\n                    $this->setBlock($key)->endBlock();\r\n                } else {\r\n                    $this->startBlock('shtml', $key);\r\n                }\r\n\r\n                return false;\r\n            } else if ($this->isBlock('shtml')) {\r\n                $this->setBlock($key);\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockAhtml($block, $key, $line, &$state)\r\n    {\r\n        if ($this->_html) {\r\n            if (preg_match(\"\/^\\s*<({$this->_blockHtmlTags})(\\s+[^>]*)?>\/i\", $line, $matches)) {\r\n                if ($this->isBlock('ahtml')) {\r\n                    $this->setBlock($key);\r\n                    return false;\r\n                } else if (empty($matches[2]) || $matches[2] != '\/') {\r\n                    $this->startBlock('ahtml', $key);\r\n                    preg_match_all(\"\/<({$this->_blockHtmlTags})(\\s+[^>]*)?>\/i\", $line, $allMatches);\r\n                    $lastMatch = $allMatches[1][count($allMatches[0]) - 1];\r\n\r\n                    if (strpos($line, \"<\/{$lastMatch}>\") !== false) {\r\n                        $this->endBlock();\r\n                    } else {\r\n                        $state['html'] = $lastMatch;\r\n                    }\r\n                    return false;\r\n                }\r\n            } else if (!!$state['html'] && strpos($line, \"<\/{$state['html']}>\") !== false) {\r\n                $this->setBlock($key)->endBlock();\r\n                $state['html'] = false;\r\n                return false;\r\n            } else if ($this->isBlock('ahtml')) {\r\n                $this->setBlock($key);\r\n                return false;\r\n            } else if (preg_match(\"\/^\\s*<!\\-\\-(.*?)\\-\\->\\s*$\/\", $line, $matches)) {\r\n                $this->startBlock('ahtml', $key)->endBlock();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockMath($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^(\\s*)\\\\$\\\\$(\\s*)$\/\", $line, $matches)) {\r\n            if ($this->isBlock('math')) {\r\n                $this->setBlock($key)->endBlock();\r\n            } else {\r\n                $this->startBlock('math', $key);\r\n            }\r\n\r\n            return false;\r\n        } else if ($this->isBlock('math')) {\r\n            $this->setBlock($key);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockPre($block, $key, $line, &$state)\r\n    {\r\n        if (preg_match(\"\/^ {4}\/\", $line)) {\r\n            if ($this->isBlock('pre')) {\r\n                $this->setBlock($key);\r\n            } else {\r\n                $this->startBlock('pre', $key);\r\n            }\r\n\r\n            return false;\r\n        } else if ($this->isBlock('pre') && preg_match(\"\/^\\s*$\/\", $line)) {\r\n            $this->setBlock($key);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockHtml($block, $key, $line, &$state)\r\n    {\r\n        if (preg_match(\"\/^\\s*<({$state['special']})(\\s+[^>]*)?>\/i\", $line, $matches)) {\r\n            $tag = strtolower($matches[1]);\r\n            if (!$this->isBlock('html', $tag) && !$this->isBlock('pre')) {\r\n                $this->startBlock('html', $key, $tag);\r\n            }\r\n\r\n            return false;\r\n        } else if (preg_match(\"\/<\\\/({$state['special']})>\\s*$\/i\", $line, $matches)) {\r\n            $tag = strtolower($matches[1]);\r\n\r\n            if ($this->isBlock('html', $tag)) {\r\n                $this->setBlock($key)\r\n                    ->endBlock();\r\n            }\r\n\r\n            return false;\r\n        } else if ($this->isBlock('html')) {\r\n            $this->setBlock($key);\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockFootnote($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^\\[\\^((?:[^\\]]|\\\\]|\\\\[)+?)\\]:\/\", $line, $matches)) {\r\n            $space = strlen($matches[0]) - 1;\r\n            $this->startBlock('footnote', $key, array(\r\n                $space, $matches[1]\r\n            ));\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockDefinition($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^\\s*\\[((?:[^\\]]|\\\\]|\\\\[)+?)\\]:\\s*(.+)$\/\", $line, $matches)) {\r\n            $this->_definitions[$matches[1]] = $this->cleanUrl($matches[2]);\r\n            $this->startBlock('definition', $key)\r\n                ->endBlock();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockQuote($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^(\\s*)>\/\", $line, $matches)) {\r\n            if ($this->isBlock('list') && strlen($matches[1]) > 0) {\r\n                $this->setBlock($key);\r\n            } else if ($this->isBlock('quote')) {\r\n                $this->setBlock($key);\r\n            } else {\r\n                $this->startBlock('quote', $key);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @param $lines\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockTable($block, $key, $line, &$state, $lines)\r\n    {\r\n        if (preg_match(\"\/^((?:(?:(?:\\||\\+)(?:[ :]*\\-+[ :]*)(?:\\||\\+))|(?:(?:[ :]*\\-+[ :]*)(?:\\||\\+)(?:[ :]*\\-+[ :]*))|(?:(?:[ :]*\\-+[ :]*)(?:\\||\\+))|(?:(?:\\||\\+)(?:[ :]*\\-+[ :]*)))+)$\/\", $line, $matches)) {\r\n            if ($this->isBlock('table')) {\r\n                $block[3][0][] = $block[3][2];\r\n                $block[3][2]++;\r\n                $this->setBlock($key, $block[3]);\r\n            } else {\r\n                $head = 0;\r\n\r\n                if (empty($block) ||\r\n                    $block[0] != 'normal' ||\r\n                    preg_match(\"\/^\\s*$\/\", $lines[$block[2]])) {\r\n                    $this->startBlock('table', $key);\r\n                } else {\r\n                    $head = 1;\r\n                    $this->backBlock(1, 'table');\r\n                }\r\n\r\n                if ($matches[1][0] == '|') {\r\n                    $matches[1] = substr($matches[1], 1);\r\n\r\n                    if ($matches[1][strlen($matches[1]) - 1] == '|') {\r\n                        $matches[1] = substr($matches[1], 0, -1);\r\n                    }\r\n                }\r\n\r\n                $rows = preg_split(\"\/(\\+|\\|)\/\", $matches[1]);\r\n                $aligns = array();\r\n                foreach ($rows as $row) {\r\n                    $align = 'none';\r\n\r\n                    if (preg_match(\"\/^\\s*(:?)\\-+(:?)\\s*$\/\", $row, $matches)) {\r\n                        if (!empty($matches[1]) && !empty($matches[2])) {\r\n                            $align = 'center';\r\n                        } else if (!empty($matches[1])) {\r\n                            $align = 'left';\r\n                        } else if (!empty($matches[2])) {\r\n                            $align = 'right';\r\n                        }\r\n                    }\r\n\r\n                    $aligns[] = $align;\r\n                }\r\n\r\n                $this->setBlock($key, array(array($head), $aligns, $head + 1));\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockSh($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^(#+)(.*)$\/\", $line, $matches)) {\r\n            $num = min(strlen($matches[1]), 6);\r\n            $this->startBlock('sh', $key, $num)\r\n                ->endBlock();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @param $lines\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockMh($block, $key, $line, &$state, $lines)\r\n    {\r\n        if (preg_match(\"\/^\\s*((=|-){2,})\\s*$\/\", $line, $matches)\r\n            && ($block && $block[0] == \"normal\" && !preg_match(\"\/^\\s*$\/\", $lines[$block[2]]))) {    \/\/ check if last line isn't empty\r\n            if ($this->isBlock('normal')) {\r\n                $this->backBlock(1, 'mh', $matches[1][0] == '=' ? 1 : 2)\r\n                    ->setBlock($key)\r\n                    ->endBlock();\r\n            } else {\r\n                $this->startBlock('normal', $key);\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockHr($block, $key, $line)\r\n    {\r\n        if (preg_match(\"\/^[-\\*]{3,}\\s*$\/\", $line)) {\r\n            $this->startBlock('hr', $key)\r\n                ->endBlock();\r\n\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param $block\r\n     * @param $key\r\n     * @param $line\r\n     * @param $state\r\n     * @return bool\r\n     *\/\r\n    private function parseBlockDefault($block, $key, $line, &$state)\r\n    {\r\n        if ($this->isBlock('footnote')) {\r\n            preg_match(\"\/^(\\s*)\/\", $line, $matches);\r\n            if (strlen($matches[1]) >= $block[3][0]) {\r\n                $this->setBlock($key);\r\n            } else {\r\n                $this->startBlock('normal', $key);\r\n            }\r\n        } else if ($this->isBlock('table')) {\r\n            if (false !== strpos($line, '|')) {\r\n                $block[3][2]++;\r\n                $this->setBlock($key, $block[3]);\r\n            } else {\r\n                $this->startBlock('normal', $key);\r\n            }\r\n        } else if ($this->isBlock('quote')) {\r\n            if (!preg_match(\"\/^(\\s*)$\/\", $line)) { \/\/ empty line\r\n                $this->setBlock($key);\r\n            } else {\r\n                $this->startBlock('normal', $key);\r\n            }\r\n        } else {\r\n            if (empty($block) || $block[0] != 'normal') {\r\n                $this->startBlock('normal', $key);\r\n            } else {\r\n                $this->setBlock($key);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    \/**\r\n     * @param array $blocks\r\n     * @param array $lines\r\n     * @return array\r\n     *\/\r\n    private function optimizeBlocks(array $blocks, array $lines)\r\n    {\r\n        $blocks = $this->call('beforeOptimizeBlocks', $blocks, $lines);\r\n\r\n        $key = 0;\r\n        while (isset($blocks[$key])) {\r\n            $moved = false;\r\n\r\n            $block = &$blocks[$key];\r\n            $prevBlock = isset($blocks[$key - 1]) ? $blocks[$key - 1] : NULL;\r\n            $nextBlock = isset($blocks[$key + 1]) ? $blocks[$key + 1] : NULL;\r\n\r\n            list ($type, $from, $to) = $block;\r\n\r\n            if ('pre' == $type) {\r\n                $isEmpty = array_reduce($lines, function ($result, $line) {\r\n                    return preg_match(\"\/^\\s*$\/\", $line) && $result;\r\n                }, true);\r\n\r\n                if ($isEmpty) {\r\n                    $block[0] = $type = 'normal';\r\n                }\r\n            }\r\n\r\n            if ('normal' == $type) {\r\n                \/\/ combine two blocks\r\n                $types = array('list', 'quote');\r\n\r\n                if ($from == $to && preg_match(\"\/^\\s*$\/\", $lines[$from])\r\n                    && !empty($prevBlock) && !empty($nextBlock)) {\r\n                    if ($prevBlock[0] == $nextBlock[0] && in_array($prevBlock[0], $types)) {\r\n                        \/\/ combine 3 blocks\r\n                        $blocks[$key - 1] = array(\r\n                            $prevBlock[0], $prevBlock[1], $nextBlock[2], NULL\r\n                        );\r\n                        array_splice($blocks, $key, 2);\r\n\r\n                        \/\/ do not move\r\n                        $moved = true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!$moved) {\r\n                $key++;\r\n            }\r\n        }\r\n\r\n        return $this->call('afterOptimizeBlocks', $blocks, $lines);\r\n    }\r\n\r\n    \/**\r\n     * parseCode\r\n     *\r\n     * @param array $lines\r\n     * @param array $parts\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseCode(array $lines, array $parts, $start)\r\n    {\r\n        list ($blank, $lang) = $parts;\r\n        $lang = trim($lang);\r\n        $count = strlen($blank);\r\n\r\n        if (!preg_match(\"\/^[_a-z0-9-\\+\\#\\:\\.]+$\/i\", $lang)) {\r\n            $lang = NULL;\r\n        } else {\r\n            $parts = explode(':', $lang);\r\n            if (count($parts) > 1) {\r\n                list ($lang, $rel) = $parts;\r\n                $lang = trim($lang);\r\n                $rel = trim($rel);\r\n            }\r\n        }\r\n\r\n        $isEmpty = true;\r\n\r\n        $lines = array_map(function ($line) use ($count, &$isEmpty) {\r\n            $line = preg_replace(\"\/^[ ]{{$count}}\/\", '', $line);\r\n            if ($isEmpty && !preg_match(\"\/^\\s*$\/\", $line)) {\r\n                $isEmpty = false;\r\n            }\r\n\r\n            return htmlspecialchars($line);\r\n        }, array_slice($lines, 1, -1));\r\n        $str = implode(\"\\n\", $this->markLines($lines, $start + 1));\r\n\r\n        return $isEmpty ? '' :\r\n            '<pre><code' . (!empty($lang) ? \" class=\\\"{$lang}\\\"\" : '')\r\n            . (!empty($rel) ? \" rel=\\\"{$rel}\\\"\" : '') . '>'\r\n            . $str . '<\/code><\/pre>';\r\n    }\r\n\r\n    \/**\r\n     * parsePre\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parsePre(array $lines, $value, $start)\r\n    {\r\n        foreach ($lines as &$line) {\r\n            $line = htmlspecialchars(substr($line, 4));\r\n        }\r\n\r\n        $str = implode(\"\\n\", $this->markLines($lines, $start));\r\n        return preg_match(\"\/^\\s*$\/\", $str) ? '' : '<pre><code>' . $str . '<\/code><\/pre>';\r\n    }\r\n\r\n    \/**\r\n     * parseAhtml\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseAhtml(array $lines, $value, $start)\r\n    {\r\n        return trim(implode(\"\\n\", $this->markLines($lines, $start)));\r\n    }\r\n\r\n    \/**\r\n     * parseShtml\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseShtml(array $lines, $value, $start)\r\n    {\r\n        return trim(implode(\"\\n\", $this->markLines(array_slice($lines, 1, -1), $start + 1)));\r\n    }\r\n\r\n    \/**\r\n     * parseMath\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @param int $end\r\n     * @return string\r\n     *\/\r\n    private function parseMath(array $lines, $value, $start, $end)\r\n    {\r\n        return '<p>' . $this->markLine($start, $end) . htmlspecialchars(implode(\"\\n\", $lines)) . '<\/p>';\r\n    }\r\n\r\n    \/**\r\n     * parseSh\r\n     *\r\n     * @param array $lines\r\n     * @param int $num\r\n     * @param int $start\r\n     * @param int $end\r\n     * @return string\r\n     *\/\r\n    private function parseSh(array $lines, $num, $start, $end)\r\n    {\r\n        $line = $this->markLine($start, $end) . $this->parseInline(trim($lines[0], '# '));\r\n        return preg_match(\"\/^\\s*$\/\", $line) ? '' : \"<h{$num}>{$line}<\/h{$num}>\";\r\n    }\r\n\r\n    \/**\r\n     * parseMh\r\n     *\r\n     * @param array $lines\r\n     * @param int $num\r\n     * @param int $start\r\n     * @param int $end\r\n     * @return string\r\n     *\/\r\n    private function parseMh(array $lines, $num, $start, $end)\r\n    {\r\n        return $this->parseSh($lines, $num, $start, $end);\r\n    }\r\n\r\n    \/**\r\n     * parseQuote\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseQuote(array $lines, $value, $start)\r\n    {\r\n        foreach ($lines as &$line) {\r\n            $line = preg_replace(\"\/^\\s*> ?\/\", '', $line);\r\n        }\r\n        $str = implode(\"\\n\", $lines);\r\n\r\n        return preg_match(\"\/^\\s*$\/\", $str) ? '' : '<blockquote>' . $this->parse($str, true, $start) . '<\/blockquote>';\r\n    }\r\n\r\n    \/**\r\n     * parseList\r\n     *\r\n     * @param array $lines\r\n     * @param mixed $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseList(array $lines, $value, $start)\r\n    {\r\n        $html = '';\r\n        $minSpace = 99999;\r\n        $secondMinSpace = 99999;\r\n        $found = false;\r\n        $secondFound = false;\r\n        $rows = array();\r\n\r\n        \/\/ count levels\r\n        foreach ($lines as $key => $line) {\r\n            if (preg_match(\"\/^(\\s*)((?:[0-9]+\\.?)|\\-|\\+|\\*)(\\s+)(.*)$\/i\", $line, $matches)) {\r\n                $space = strlen($matches[1]);\r\n                $type = false !== strpos('+-*', $matches[2]) ? 'ul' : 'ol';\r\n                $minSpace = min($space, $minSpace);\r\n                $found = true;\r\n\r\n                if ($space > 0) {\r\n                    $secondMinSpace = min($space, $secondMinSpace);\r\n                    $secondFound = true;\r\n                }\r\n\r\n                $rows[] = array($space, $type, $line, $matches[4]);\r\n            } else {\r\n                $rows[] = $line;\r\n\r\n                if (preg_match(\"\/^(\\s*)\/\", $line, $matches)) {\r\n                    $space = strlen($matches[1]);\r\n\r\n                    if ($space > 0) {\r\n                        $secondMinSpace = min($space, $secondMinSpace);\r\n                        $secondFound = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        $minSpace = $found ? $minSpace : 0;\r\n        $secondMinSpace = $secondFound ? $secondMinSpace : $minSpace;\r\n\r\n        $lastType = '';\r\n        $leftLines = array();\r\n        $leftStart = 0;\r\n\r\n        foreach ($rows as $key => $row) {\r\n            if (is_array($row)) {\r\n                list ($space, $type, $line, $text) = $row;\r\n\r\n                if ($space != $minSpace) {\r\n                    $leftLines[] = preg_replace(\"\/^\\s{\" . $secondMinSpace . \"}\/\", '', $line);\r\n                } else {\r\n                    if (!empty($leftLines)) {\r\n                        $html .= \"<li>\" . $this->parse(implode(\"\\n\", $leftLines), true, $start + $leftStart) . \"<\/li>\";\r\n                    }\r\n\r\n                    if ($lastType != $type) {\r\n                        if (!empty($lastType)) {\r\n                            $html .= \"<\/{$lastType}>\";\r\n                        }\r\n\r\n                        $html .= \"<{$type}>\";\r\n                    }\r\n\r\n                    $leftStart = $key;\r\n                    $leftLines = array($text);\r\n                    $lastType = $type;\r\n                }\r\n            } else {\r\n                $leftLines[] = preg_replace(\"\/^\\s{\" . $secondMinSpace . \"}\/\", '', $row);\r\n            }\r\n        }\r\n\r\n        if (!empty($leftLines)) {\r\n            $html .= \"<li>\" . $this->parse(implode(\"\\n\", $leftLines), true, $start + $leftStart) . \"<\/li><\/{$lastType}>\";\r\n        }\r\n\r\n        return $html;\r\n    }\r\n\r\n    \/**\r\n     * @param array $lines\r\n     * @param array $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseTable(array $lines, array $value, $start)\r\n    {\r\n        list ($ignores, $aligns) = $value;\r\n        $head = count($ignores) > 0 && array_sum($ignores) > 0;\r\n\r\n        $html = '<table>';\r\n        $body = $head ? NULL : true;\r\n        $output = false;\r\n\r\n        foreach ($lines as $key => $line) {\r\n            if (in_array($key, $ignores)) {\r\n                if ($head && $output) {\r\n                    $head = false;\r\n                    $body = true;\r\n                }\r\n\r\n                continue;\r\n            }\r\n\r\n            $line = trim($line);\r\n            $output = true;\r\n\r\n            if ($line[0] == '|') {\r\n                $line = substr($line, 1);\r\n\r\n                if ($line[strlen($line) - 1] == '|') {\r\n                    $line = substr($line, 0, -1);\r\n                }\r\n            }\r\n\r\n\r\n            $rows = array_map(function ($row) {\r\n                if (preg_match(\"\/^\\s+$\/\", $row)) {\r\n                    return ' ';\r\n                } else {\r\n                    return trim($row);\r\n                }\r\n            }, explode('|', $line));\r\n            $columns = array();\r\n            $last = -1;\r\n\r\n            foreach ($rows as $row) {\r\n                if (strlen($row) > 0) {\r\n                    $last++;\r\n                    $columns[$last] = array(\r\n                        isset($columns[$last]) ? $columns[$last][0] + 1 : 1, $row\r\n                    );\r\n                } else if (isset($columns[$last])) {\r\n                    $columns[$last][0]++;\r\n                } else {\r\n                    $columns[0] = array(1, $row);\r\n                }\r\n            }\r\n\r\n            if ($head) {\r\n                $html .= '<thead>';\r\n            } else if ($body) {\r\n                $html .= '<tbody>';\r\n            }\r\n\r\n            $html .= '<tr' . ($this->_line ? ' class=\"line\" data-start=\"'\r\n                    . ($start + $key) . '\" data-end=\"' . ($start + $key)\r\n                    . '\" data-id=\"' . $this->_uniqid . '\"' : '') . '>';\r\n\r\n            foreach ($columns as $key => $column) {\r\n                list ($num, $text) = $column;\r\n                $tag = $head ? 'th' : 'td';\r\n\r\n                $html .= \"<{$tag}\";\r\n                if ($num > 1) {\r\n                    $html .= \" colspan=\\\"{$num}\\\"\";\r\n                }\r\n\r\n                if (isset($aligns[$key]) && $aligns[$key] != 'none') {\r\n                    $html .= \" align=\\\"{$aligns[$key]}\\\"\";\r\n                }\r\n\r\n                $html .= '>' . $this->parseInline($text) . \"<\/{$tag}>\";\r\n            }\r\n\r\n            $html .= '<\/tr>';\r\n\r\n            if ($head) {\r\n                $html .= '<\/thead>';\r\n            } else if ($body) {\r\n                $body = false;\r\n            }\r\n        }\r\n\r\n        if ($body !== NULL) {\r\n            $html .= '<\/tbody>';\r\n        }\r\n\r\n        $html .= '<\/table>';\r\n        return $html;\r\n    }\r\n\r\n    \/**\r\n     * parseHr\r\n     *\r\n     * @param array $lines\r\n     * @param array $value\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseHr($lines, $value, $start)\r\n    {\r\n        return $this->_line ? '<hr class=\"line\" data-start=\"' . $start . '\" data-end=\"' . $start . '\">' : '<hr>';\r\n    }\r\n\r\n    \/**\r\n     * parseNormal\r\n     *\r\n     * @param array $lines\r\n     * @param bool $inline\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseNormal(array $lines, $inline = false, $start)\r\n    {\r\n        foreach ($lines as $key => &$line) {\r\n            $line = $this->parseInline($line);\r\n\r\n            if (!preg_match(\"\/^\\s*$\/\", $line)) {\r\n                $line = $this->markLine($start + $key) . $line;\r\n            }\r\n        }\r\n\r\n        $str = trim(implode(\"\\n\", $lines));\r\n        $str = preg_replace(\"\/(\\n\\s*){2,}\/\", \"<\/p><p>\", $str);\r\n        $str = preg_replace(\"\/\\n\/\", \"<br>\", $str);\r\n\r\n        return preg_match(\"\/^\\s*$\/\", $str) ? '' : ($inline ? $str : \"<p>{$str}<\/p>\");\r\n    }\r\n\r\n    \/**\r\n     * parseFootnote\r\n     *\r\n     * @param array $lines\r\n     * @param array $value\r\n     * @return string\r\n     *\/\r\n    private function parseFootnote(array $lines, array $value)\r\n    {\r\n        list($space, $note) = $value;\r\n        $index = array_search($note, $this->_footnotes);\r\n\r\n        if (false !== $index) {\r\n            $lines[0] = preg_replace(\"\/^\\[\\^((?:[^\\]]|\\\\]|\\\\[)+?)\\]:\/\", '', $lines[0]);\r\n            $this->_footnotes[$index] = $lines;\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    \/**\r\n     * parseDefine\r\n     *\r\n     * @return string\r\n     *\/\r\n    private function parseDefinition()\r\n    {\r\n        return '';\r\n    }\r\n\r\n    \/**\r\n     * parseHtml\r\n     *\r\n     * @param array $lines\r\n     * @param string $type\r\n     * @param int $start\r\n     * @return string\r\n     *\/\r\n    private function parseHtml(array $lines, $type, $start)\r\n    {\r\n        foreach ($lines as &$line) {\r\n            $line = $this->parseInline($line,\r\n                isset($this->_specialWhiteList[$type]) ? $this->_specialWhiteList[$type] : '');\r\n        }\r\n\r\n        return implode(\"\\n\", $this->markLines($lines, $start));\r\n    }\r\n\r\n    \/**\r\n     * @param $url\r\n     * @return string\r\n     *\/\r\n    public function cleanUrl($url)\r\n    {\r\n        if (preg_match(\"\/^\\s*((http|https|ftp|mailto):[x80-xff_a-z0-9-\\.\\\/%#!@\\?\\+=~\\|\\,&\\(\\)]+)\/i\", $url, $matches)) {\r\n            return $matches[1];\r\n        } else if (preg_match(\"\/^\\s*([x80-xff_a-z0-9-\\.\\\/%#!@\\?\\+=~\\|\\,&]+)\/i\", $url, $matches)) {\r\n            return $matches[1];\r\n        } else {\r\n            return '#';\r\n        }\r\n    }\r\n\r\n    \/**\r\n     * @param $str\r\n     * @return mixed\r\n     *\/\r\n    public function escapeBracket($str)\r\n    {\r\n        return str_replace(\r\n            array('\\[', '\\]', '\\(', '\\)'), array('[', ']', '(', ')'), $str\r\n        );\r\n    }\r\n\r\n    \/**\r\n     * startBlock\r\n     *\r\n     * @param mixed $type\r\n     * @param mixed $start\r\n     * @param mixed $value\r\n     * @return $this\r\n     *\/\r\n    private function startBlock($type, $start, $value = NULL)\r\n    {\r\n        $this->_pos++;\r\n        $this->_current = $type;\r\n\r\n        $this->_blocks[$this->_pos] = array($type, $start, $start, $value);\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * endBlock\r\n     *\r\n     * @return $this\r\n     *\/\r\n    private function endBlock()\r\n    {\r\n        $this->_current = 'normal';\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * isBlock\r\n     *\r\n     * @param mixed $type\r\n     * @param mixed $value\r\n     * @return bool\r\n     *\/\r\n    private function isBlock($type, $value = NULL)\r\n    {\r\n        return $this->_current == $type\r\n            && (NULL === $value ? true : $this->_blocks[$this->_pos][3] == $value);\r\n    }\r\n\r\n    \/**\r\n     * getBlock\r\n     *\r\n     * @return array\r\n     *\/\r\n    private function getBlock()\r\n    {\r\n        return isset($this->_blocks[$this->_pos]) ? $this->_blocks[$this->_pos] : NULL;\r\n    }\r\n\r\n    \/**\r\n     * setBlock\r\n     *\r\n     * @param mixed $to\r\n     * @param mixed $value\r\n     * @return $this\r\n     *\/\r\n    private function setBlock($to = NULL, $value = NULL)\r\n    {\r\n        if (NULL !== $to) {\r\n            $this->_blocks[$this->_pos][2] = $to;\r\n        }\r\n\r\n        if (NULL !== $value) {\r\n            $this->_blocks[$this->_pos][3] = $value;\r\n        }\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * backBlock\r\n     *\r\n     * @param mixed $step\r\n     * @param mixed $type\r\n     * @param mixed $value\r\n     * @return $this\r\n     *\/\r\n    private function backBlock($step, $type, $value = NULL)\r\n    {\r\n        if ($this->_pos < 0) {\r\n            return $this->startBlock($type, 0, $value);\r\n        }\r\n\r\n        $last = $this->_blocks[$this->_pos][2];\r\n        $this->_blocks[$this->_pos][2] = $last - $step;\r\n\r\n        if ($this->_blocks[$this->_pos][1] <= $this->_blocks[$this->_pos][2]) {\r\n            $this->_pos++;\r\n        }\r\n\r\n        $this->_current = $type;\r\n        $this->_blocks[$this->_pos] = array(\r\n            $type, $last - $step + 1, $last, $value\r\n        );\r\n\r\n        return $this;\r\n    }\r\n\r\n    \/**\r\n     * @return $this\r\n     *\/\r\n    private function combineBlock()\r\n    {\r\n        if ($this->_pos < 1) {\r\n            return $this;\r\n        }\r\n\r\n        $prev = $this->_blocks[$this->_pos - 1];\r\n        $current = $this->_blocks[$this->_pos];\r\n\r\n        $prev[2] = $current[2];\r\n        $this->_blocks[$this->_pos - 1] = $prev;\r\n        $this->_current = $prev[0];\r\n        unset($this->_blocks[$this->_pos]);\r\n        $this->_pos--;\r\n\r\n        return $this;\r\n    }\r\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,null,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,0,0,null,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,0,0,null,0,0,0,0,null,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,0,0,0,0,null,null,null,null,null,null,0,0,null,0,0,null,0,0,0,0,0,null,0,0,0,0,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,0,null,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,null,null,0,0,null,0,0,null,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,0,0,0,0,null,0,null,0,0,0,null,0,null,null,0,0,null,0,null,0,0,0,0,null,0,0,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,null,0,0,0,null,0,0,0,0,null,null,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,0,0,null,null,0,0,0,0,0,0,null,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,0,null,0,0,null,null,null,null,null,null,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,0,0,0,null,null,0,0,0,null,0,0,null,0,0,0,0,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,0,null,0,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,0,null,0,0,0,0,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,null,0,0,null,0,0,0,0,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,null,0,0,0,null,0,0,0,null,0,null,0,null,0,0,null,0,0,0,0,null,0,null,0,null,0,0,0,null,0,0,0,0,null,null,0,0,0,0,null,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,null,0,null,null,0,0,0,0,null,0,0,0,null,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,null,0,0,0,null,0,0,null,0,0,0,0,0,0,0,null,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,0,0,null,0,0,0,0,null,0,0,null,0,0,0,0,0,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,null,0,0,0,0,0,0,null,0,0,null,0,0,null,0,0,null,0,0,0,0,null,null,null,0,0,0,0,0,0,0,0,null,0,0,0,0,0,0,0,0,0,0,0,0,null,0,0,0,0,0,null,0,0,0,null,0,0,0,null,0,0,0,0,null,0,0,0,null,0,0,null,0,null,0,0,0,0,0,0,null,0,0,0,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,0,0,null,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,null,0,0,null,null,null,null,null,null,0,0,0,0,0,0,0,0,0,null,null,null,null,null,null,0,0,0,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,null,0,0,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,null,null,null,null,null,0,0,0,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,0,null,0,0,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,0,null,0,0,0,0,null,0,0,null,null,null,null,null,0,0,0,0,null,0,0,null,0,0,0,0,0,null,0,0,null]}],"environment":{"packagist_version":"2.2.0"}}